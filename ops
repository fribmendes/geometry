{"version":1,"ops":[{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1542732216,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDM0MjE5MQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440342191"},"message":"Can you try this on https://github.com/jedahan/geometry/tree/mnml ? I'm going to delete the info-command branch as it is out of date","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1542752451,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDQ1MDE2Mw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440450163"},"message":"It gives the same errors. Have you maybe started to use `short_loops` in the branch?","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1542753145,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDQ1MzA4Ng==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440453086"},"message":"You can check if it reproduces for you – following will compile all files that zplugin-module compiles, probably all that are in use by default:\n\n```zsh\nall=(\n./async.zsh.zwc\n./functions/geometry_docker_machine.zsh.zwc\n./functions/geometry_exec_time.zsh.zwc\n./functions/geometry_git.zsh.zwc\n./functions/geometry_hg.zsh.zwc\n./functions/geometry_hostname.zsh.zwc\n./functions/geometry_jobs.zsh.zwc\n./functions/geometry_kube.zsh.zwc\n./functions/geometry_node.zsh.zwc\n./functions/geometry_path.zsh.zwc\n./functions/geometry_ruby.zsh.zwc\n./functions/geometry_rustup.zsh.zwc\n./functions/geometry_status.zsh.zwc\n./functions/geometry_virtualenv.zsh.zwc\n./geometry.plugin.zsh.zwc\n)\nfor file in ${all[@]}; do zcompile \"${file:r}\"; echo $file:r compiled; done\n```","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1542756686,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDQ2Njg0Mw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440466843"},"message":"Ahh okay, so yeah I get the same errors you do, after compiling and opening a new tab","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1542757298,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDQ2ODg1Mg==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440468852"},"message":"Can you give it a shot now?","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1542759091,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDQ3NzA0MA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440477040"},"message":"Also if you know a way I should be using bindkey better than just mapping '^M' I'm all ears!","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1542812749,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDY5NjM3NQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440696375"},"message":"It works now, cool. I have a more \"private\" issue thought – I simulate initial `precmd` call, set up with:\n\n```zsh\n% grep precmd geometry.plugin.zsh\nadd-zsh-hook precmd geometry::clear_title\nadd-zsh-hook precmd geometry::prompt\n```\n\nI do call them in zplugin's `atload''` hook:\n\n```zsh\natload.geometry:: ~/.zshrc                                            mnml 15h::⬡\nzplugin ice load'![[ $MYPROMPT = 4 ]]' unload'![[ $MYPROMPT != 4 ]]' atload\"geometry::clear_title; geometry::prompt\" lucid # ver\"mnml\"\n```\n\nBut I don't get the prompt until first command being run, like it is shown in this video:\n\nhttps://asciinema.org/a/XNtEXTtNiRTNGMsvilo8X9vce\n\nDo you maybe know what else `geometry` runs through some hooks, that might be causing this?","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1542815651,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MDcxNTk5NA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-440715994"},"message":"`geometry::rprompt` is also run once when sourcing geometry.zsh, maybe that needs to be run?","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1543266376,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MTc5Nzc4OQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-441797789"},"message":"Did running `geometry::rprompt` fix things?","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1543268059,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MTgwNzAxNw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-441807017"},"message":"No, sadly no","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1543273877,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0MTgzNjA1NA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-441836054"},"message":"does it work if you manually source geometry.zsh in your zshrc instead of using zplugin? just trying to narrow down where the issue may be","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1544196861,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0NTI2OTIyNw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-445269227"},"message":"Yes it worked. All this resulted in a diagnosis:\n1. I was using plugin gitlab -\u003e zdharma/fsh-auto-themes\n2. It adds `chpwd` hook\n3. Normally zsh startup doesn't cause `chpwd` to be called, so say that \"order of loaded plugins doesn't matter\" (precisely: fsh-auto-themes was being loaded before zdharma/fast-syntax-highlighting, a risky act, as it depends on F-Sy-H)\n4. However geometry runs at loading (xtrace output):\n+geometry::wrap:3\u003e cd /Users/sgniazdowski/.zplugin/plugins/jedahan---geometry\n5. This triggers fsh-auto-themes and is being done before loading of F-Sy-H\n6. An error in fsh-auto-themes caused the prompt to not appear until first actual command was run. Unsure why, maybe because of $? != 0?\n\nTo solve this geometry should use `-q` option with `cd` – it suppresses side-effects. I've had this situation with zplugin, and I also suppress \"autopushd\" option effects by:\n\n```zsh\n() { setopt localoptions noautopushd; builtin cd -q \"$local_dir/$dirname\"; }\n```\n\nBut a solution would also be to use `pushd` and then `popd` builtins.\n\nI can now test the new geometry 😄","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1544200692,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ0NTI4OTgxNg==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-445289816"},"message":"Awesome debuggging! I pushed it to https://github.com/jedahan/geometry/commit/e7b9e87dfcdba140fb76cdf708275fdd88eb15b4","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546028680,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDQyMTY2Nw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450421667"},"message":"How are things looking @psprint ? Any other bugs/questions/suggestions?","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546029533,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDQyMzQ3NQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450423475"},"message":"I've ran the new geometry for a few days (7-10), but switched back to normal version, because of the blue, not blue-bold for the path ;). I've also had an impression of changes in the arrangement of the information of the prompt, i.e. visual locations of the bits of information, but running the `jedahan/geometry` plugin now shows that there are no changes in the arrangement. Maybe the updates (I'm running `zplugin update --all` quite often) restored the normal-geometry visual arrangement, I don't know.\n\nIn general, I've felt bad after switching to the `jedahan/geometry`, because it was taking away the normal-geometry of confirmed-value... So I couldn't keep up using it for more than 7-10 days.. :unamused: I can switch now again after I'll figure out how to change the color of the path to light-blue (from blue).","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546033681,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDQzMjY1NA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450432654"},"message":"Thanks for the feedback, and giving it another try.\n\nIt sounds like there are two main issues, correct me if I am wrong:\n\n1. The path status color changed. Do you mean the `﻿﻿▲` or the actual path like `~/some/dir`? The status symbol color can be set with `GEOMETRY_STATUS_COLOR`, and if you are on a terminal with 256 colors you can choose a number instead of a word. If this does not do what you want, what would be ideal?\n\n2. I am not sure what you mean, but this sounds important: normal-geometry of confirmed-value being taken away. Could you show me an example?","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546104007,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDUwNzI0NQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450507245"},"message":"1. I need to change the `blue` color of the path in the prompt.\n  2. I cannot, because now I don't have that impression (except for the dark-blue-path) and I've forgot what it was about the time ago.","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546429233,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDg0MzM2NQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450843365"},"message":"I've run `zplugin report` on the jedahan/geometry theme, it might be interesting to you, here's the result:\n\n![zplg-geometry-report](https://user-images.githubusercontent.com/6049288/50590313-b5ce9080-0e8a-11e9-8d74-9379475e3f65.png)\n\nThere's seem to be no `*color*` variable other than the `*TIME*` parameters:\n```\nzplg report jedahan/geometry | grep -i color                             master 5d::●::⬡\nGEOMETRY_TIME_COLOR_SHORT    [ \"\" -\u003e scalar         ]\nGEOMETRY_TIME_COLOR_NEUTRAL  [ \"\" -\u003e scalar         ]\nGEOMETRY_TIME_COLOR_LONG     [ \"\" -\u003e scalar         ]\n```\n\nAlthough some variables could be created at runtime, e.g. in precmd hook, although `GEOMETRY\u003ctab\u003e` doesn't yield any. Setting `GEOMETRY_COLOR_DIR` doesn't cause the current-path to change like the README says.\n\nWhat is a way to configure the dir color?","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546445811,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDkwNzMyNg==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450907326"},"message":"Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\n```zsh\n▲ echo \"$functions[geometry_path]\"\n    local dir=${GEOMETRY_PATH_SYMBOL_HOME:=\"%3~\"}\n    (( ${GEOMETRY_PATH_SHOW_BASENAME:=false} )) \u0026\u0026 dir=${PWD:t}\n    ansi ${GEOMETRY_PATH_COLOR:=blue} $dir\n```","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546445865,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDkwNzYwMQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450907601"},"message":"I also wonder how I can hide all the `_{rebase,stashes,etc}` functions","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546457589,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDk2MDk1NQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450960955"},"message":"\u003e Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\nZstyles are for this. So e.g.:\n```\n# To set:\nzstyle :plugin:geometry:color path_dir 131\n# To read:\nzstyle -s :plugin:geometry:color path_dir my_path_dir || my_path_dir=\"some-default-value\"\n```\nI've missed the zstyle-way too, in Zsh-Navigation-Tools, there're many `znt_*` variables ( like:`znt_list_instant_select=1` or `znt_list_border=0`). However, the upper-case global parameter way feels more natural.\n\nThere's no way to hide the functions. I once posted on zsh-workers mailing list about the need of namespaces for functions, but it didn't catch-on any attention and/or response.","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546457589,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE2NzQ3NjExNg=="},"target":"d23474bcb4755befcfa0ff9f6f5cdc58e9b4c467544ed5a7f90590055a9a140e","message":"\u003e Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\nZstyles are for this. So e.g.:\n```\n# To set:\nzstyle :plugin:geometry:color path_dir 131\n# To read:\nzstyle -s :plugin:geometry:color path_dir my_path_dir || my_path_dir=\"some-default-value\"\n```\nI've missed the zstyle-way too, in Zsh-Navigation-Tools, there're many `znt_*` variables ( like:`znt_list_instant_select=1` or `znt_list_border=0`). However, the upper-case global parameter way feels more natural.\n\nThere's no way to hide the functions. I once posted on zsh-workers mailing list about the need of namespaces for functions, but it didn't catch-on any attention and/or response.\n\n**PS:** Maybe you have an idea how the functions-namespaces or functions-hiding should work? You could post to zsh-workers about this.","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546457692,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE2NzQ3Njc1Mg=="},"target":"d23474bcb4755befcfa0ff9f6f5cdc58e9b4c467544ed5a7f90590055a9a140e","message":"\u003e Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\nZstyles are for this. So e.g.:\n```\n# To set:\nzstyle :plugin:geometry:color path_dir 131\n# To read:\nzstyle -s :plugin:geometry:color path_dir my_path_dir || my_path_dir=\"some-default-value\"\n```\nI've missed the zstyle-way too, in Zsh-Navigation-Tools, there're many `znt_*` variables ( like:`znt_list_instant_select=1` or `znt_list_border=0`). However, the upper-case global parameter way feels more natural.\n\nThere's no way to hide the functions. I once posted on zsh-workers mailing list about the need of namespaces for functions, but it didn't catch-on any attention and/or response.\n\n**PS:** Maybe you have an idea how the functions-namespaces or functions-hiding should work? You could post to zsh-workers about this.\n\n**PS2:** The good thing that function name can consist of probably literally any ASCII character, even e.g. `]', so you could namespace the function this way (so `\\]rebase` in the synthetic `[`-based example).","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546457734,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE2NzQ3Njk2NQ=="},"target":"d23474bcb4755befcfa0ff9f6f5cdc58e9b4c467544ed5a7f90590055a9a140e","message":"\u003e Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\nZstyles are for this. So e.g.:\n```\n# To set:\nzstyle :plugin:geometry:color path_dir 131\n# To read:\nzstyle -s :plugin:geometry:color path_dir my_path_dir || my_path_dir=\"some-default-value\"\n```\nI've missed the zstyle-way too, in Zsh-Navigation-Tools, there're many `znt_*` variables ( like:`znt_list_instant_select=1` or `znt_list_border=0`). However, the upper-case global parameter way feels more natural.\n\nThere's no way to hide the functions. I once posted on zsh-workers mailing list about the need of namespaces for functions, but it didn't catch-on any attention and/or response.\n\n**PS:** Maybe you have an idea how the functions-namespaces or functions-hiding should work? You could post to zsh-workers about this.\n\n**PS2:** The good thing that function name can consist of probably literally any ASCII character, even e.g. `]`, so you could namespace the function this way (so `\\]rebase` in the synthetic `[`-based example).","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546457754,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE2NzQ3NzA4Mw=="},"target":"d23474bcb4755befcfa0ff9f6f5cdc58e9b4c467544ed5a7f90590055a9a140e","message":"\u003e Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\nZstyles are for this. So e.g.:\n```\n# To set:\nzstyle :plugin:geometry:color path_dir 131\n# To read:\nzstyle -s :plugin:geometry:color path_dir my_path_dir || my_path_dir=\"some-default-value\"\n```\nI've missed the zstyle-way too, in Zsh-Navigation-Tools, there're many `znt_*` variables ( like:`znt_list_instant_select=1` or `znt_list_border=0`). However, the upper-case global parameter way feels more natural.\n\nThere's no way to hide the functions. I once posted on zsh-workers mailing list about the need of namespaces for functions, but it didn't catch-on any attention and/or response.\n\n**PS:** Maybe you have an idea how the functions-namespaces or functions-hiding should work? You could post to zsh-workers about this.\n\n**PS2:** The good thing is that function name can consist of probably literally any ASCII character, even e.g. `]`, so you could namespace the function this way (so `\\]rebase` in the synthetic `[`-based example).","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546457785,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE2NzQ3NzMwNQ=="},"target":"d23474bcb4755befcfa0ff9f6f5cdc58e9b4c467544ed5a7f90590055a9a140e","message":"\u003e Most plugins try not to export their environment variables to help reduce pollution. From `geometry_path`, `GEOMETRY_PATH_COLOR` is the thing to be set. I will add it to the readme. Do you have suggestions on how to make it easier to find out what can be set without polluting env with hundreds of variables?\n\nZstyles are for this. So e.g.:\n```\n# To set:\nzstyle :plugin:geometry:color path_dir 131\n# To read:\nzstyle -s :plugin:geometry:color path_dir my_path_dir || my_path_dir=\"some-default-value\"\n```\nI've missed the zstyle-way too, in Zsh-Navigation-Tools, there're many `znt_*` variables ( like:`znt_list_instant_select=1` or `znt_list_border=0`). However, the upper-case global parameter way feels more natural.\n\nThere's no way to hide the functions. I once posted on zsh-workers mailing list about the need of namespaces for functions, but it didn't catch-on any attention and/or response.\n\n**PS:** Maybe you have an idea how the functions-namespaces or functions-hiding should work? You could post to zsh-workers about this.\n\n**PS2:** The good thing is that function name can consist of probably literally any ASCII character, even e.g. `]`, so you could namespace the function this way (so `\\]rebase() { echo Hello; }` in the synthetic `[`-based example).","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546458508,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MDk2NTQ1MA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-450965450"},"message":"Though `zstyle` is cool, I would rather people be able to use geometry with as few new concepts to learn as possible.\n\nThe downside of putting environment variables inside functions is they are hard to discover. I might be convinced that its better for discoverability by putting them outside functions, even if that does pollute the environment. \n\nI think at one point there was another benefit to the environment variables being outside the functions, where you could change them on the fly and it would update everywhere, but that might not be the case now.\n\nRegarding namespacing functions, I also think `geometry::` could be fine. Right now I do like that `geometry::*` is \"internal\" functions, and `geometry_blah` are just default functions provided by the project, because the visual separation is nice, and people might think that `::` has some special meaning when it really doesn't.\n\nfunctions-hiding and functions-namespaces I think should really only exist with the same scoping rules we have for variables right now. That is, if i want to hide some internal geometry function, I should just define it within the scope of the enclosing function. Even if I have to define twice, oh well.","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1546478316,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MTAzNDEyNQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-451034125"},"message":"Yeah, the fever concepts issue, I agree. Although the nice looking of the :-separated path, i.e. \":plugin:geometry:color\" might be worth adding a concept.\n\nI've recalled one other way – a global hash. Like in Zplugin, where I use `$ZPLGM`, i.e. \"z-plugin-map\" for internal use and for [user's customization](https://github.com/zdharma/zplugin#customizing-paths--other). The issue – user has to adopt a skill (global hash variable definition, understanding what happens if one writes to the hash and then again calls `declare -A...`). However the internal-use is a nice thing. For example in fast-syntax-highlighting I'm using a global hash `FAST_HIGHLIGHT` for everything, like cache of available `git` commands, user-exposed flags (like `use_async` field). I've checked now and the hash has 287 keys, head of the keys list:\n\n```zsh\nchroma-git-call-nr\ncache-path-info-7072-born-at\ncache-path-info-7814-born-at\ncache-path-string-7156-born-at\ncache-path-/dev/null-7822-born-at\ncache-path-n-history-18\ncache-path-info-7163\ncache-path-0-7106-born-at\nchroma-git\nchroma-pip\ncache-path-\\=-1275\ncache-path-20000-8690-born-at\ncache-path-addwin-7065\nointeractive_comments\ncache-path-\\=-8109\n```","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546792950,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MTc1NTcwNA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-451755704"},"message":"I'm going to close this issue for now, and we can investigate exposing environment variables, and renaming them in the future. Thanks for all your patience and testing @psprint!","files":null},{"type":4,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1546792950,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjA1NjM2MTA0MQ=="},"status":2},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1547078587,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1Mjc5MjczMQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-452792731"},"message":"I'm running `jedahan/geometry` prompt for the last 7 days and don't occur any problem. One more thing for the global-param-home-hash, I can give the key count for zplugin (as FAST_HIGHLIGH consists only from cache fields):\n\n```zsh\n% print -rl -- ${(k)ZPLGM}\ncol-bar\ncol-rst\nalias-map-psprint/fsh-auto-themes\nalias-map-zdharma/zsh-diff-so-fancy\nalias-map-%/Users/sgniazdowski/gitlab/zsh-tag-search.git\nTIME_19_iwata---git-now\nWAIT_IDX\nTIME_INDEX\nTIME_17_psprint---vramsteg-zsh\nUPAR\ncol-pname\nTIME_22_zdharma---git-url\nalias-map-Fakerr/git-recall\nTIME_6_psprint---zsh-editing-workbench\nSHADOWING\nTIME_4_zdharma---zconvey\nWAIT_ICE_10\n...\n```\nSo this method is really handy in having parameter-availability freedom (except for hashes \u0026 arrays, but I'm doing serialization/deserialization and store them anyway, e.g. under the key WAIT_ICE_10, there's a serialized hash stored, via the method: http://zdharma.org/Zsh-100-Commits-Club/Zsh-Native-Scripting-Handbook.html#serializing-data) and non-polluting the global namespace.\n\n\nBTW. Maybe I could test some new subsystem of the new geometry or stress-test an subsystem?","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1547078587,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE2OTk5ODYyMA=="},"target":"8218f2fd8f339310e901d768ab90cb5a3a8a308ed14c54b7e2440a39e5493218","message":"I'm running `jedahan/geometry` prompt for the last 7 days and don't occur any problem. One more thing for the global-param-home-hash, I can give the key count for zplugin (as FAST_HIGHLIGH consists only from cache fields):\n\n```zsh\n% print -rl -- ${#ZPLGM}\n108 # (on a fresh session: 87)\n\n% print -rl -- ${(k)ZPLGM}\ncol-bar\ncol-rst\nalias-map-psprint/fsh-auto-themes\nalias-map-zdharma/zsh-diff-so-fancy\nalias-map-%/Users/sgniazdowski/gitlab/zsh-tag-search.git\nTIME_19_iwata---git-now\nWAIT_IDX\nTIME_INDEX\nTIME_17_psprint---vramsteg-zsh\nUPAR\ncol-pname\nTIME_22_zdharma---git-url\nalias-map-Fakerr/git-recall\nTIME_6_psprint---zsh-editing-workbench\nSHADOWING\nTIME_4_zdharma---zconvey\nWAIT_ICE_10\n...\n```\nSo this method is really handy in having parameter-availability freedom (except for hashes \u0026 arrays, but I'm doing serialization/deserialization and store them anyway, e.g. under the key WAIT_ICE_10, there's a serialized hash stored, via the method: http://zdharma.org/Zsh-100-Commits-Club/Zsh-Native-Scripting-Handbook.html#serializing-data) and non-polluting the global namespace.\n\n\nBTW. Maybe I could test some new subsystem of the new geometry or stress-test an subsystem?","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1547061564,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ1MjgyMjY2Nw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-452822667"},"message":"Thanks for reporting back! Glad to hear things are stable now. I really wanna coordinate a release with the rest of the team soon. Hopefully with lots of screenshots :)\n\nThe serialization/deserialization is really cool, but since geometry really does so little I can't think of what makes the most sense to hide :)\n\nThe weirdest bugs are still when rendering single-width emoji, which are really apparent in tab-complete.\n\nOther stress tests could be zle bind conflicts, and performance issues.\n\nAnd investigating replacing our custom git plugin with vcs_info (if its fast enough).\n\nOh any possibly replacing our use of grep/rg/ag with `(m)` but I don't think we need to.","files":null},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1550696271,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ2NTc1MDU3NQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-465750575"},"message":"Hello,\nI have run the zplugin-stress-test command on `jedahan/geometry`:\n```\n▲ ~/github/zplugin.git zplg stress jedahan/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]```\n```\nSo the plugin won't work if someone enables  the two `*BRACES*` options. The function that does the stress test is fairly simple, I;m pasting it so that it is  known that what actually happens during the tests:\n\n```zsh\n    local -a ZPLG_STRESS_TEST_OPTIONS\n    ZPLG_STRESS_TEST_OPTIONS=( \"NO_SHORT_LOOPS\" \"IGNORE_BRACES\" \"IGNORE_CLOSE_BRACES\" \"SH\u003e\n\n    (\n        builtin emulate -LR ksh\n        builtin unsetopt shglob kshglob\n        for i in \"${ZPLG_STRESS_TEST_OPTIONS[@]}\"; do\n            builtin setopt \"$i\"\n            builtin print -n \"Stress-testing ${fname:t} for option $i \"\n            builtin zcompile -R \"$fname\" 2\u003e/dev/null \u0026\u0026 {\n                builtin print \"[${ZPLGM[col-success]}Success${ZPLGM[col-rst]}]\"\n            } || {\n                builtin print \"[${ZPLGM[col-failure]}Fail${ZPLGM[col-rst]}]\"\n            }\n            builtin unsetopt \"$i\"\n        done\n    )\n```zsh\n\nThe plugin `gemoetry-zsh/geometry` passes all the tests.\n\n```\n▲ ~/github/zplugin.git zplg stress geometry-zsh/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]\n```\n\nAlso, I'm using the plugin without problems starting  from the last conversation.","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1550696271,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4Njk1NjA4Nw=="},"target":"d9d762f021da603aba119fa1684c1b16ba650a8a927170487a05b5e9275cb030","message":"Hello,\nI have run the zplugin-stress-test command on `jedahan/geometry`:\n```\n▲ ~/github/zplugin.git zplg stress jedahan/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]```\n```\nSo the plugin won't work if someone enables  the two `*BRACES*` options. The function that does the stress test is fairly simple, I;m pasting it so that it is  known that what actually happens during the tests:\n\n```zsh\n    local -a ZPLG_STRESS_TEST_OPTIONS\n    ZPLG_STRESS_TEST_OPTIONS=( \"NO_SHORT_LOOPS\" \"IGNORE_BRACES\" \"IGNORE_CLOSE_BRACES\" \"SH\u003e\n\n    (\n        builtin emulate -LR ksh\n        builtin unsetopt shglob kshglob\n        for i in \"${ZPLG_STRESS_TEST_OPTIONS[@]}\"; do\n            builtin setopt \"$i\"\n            builtin print -n \"Stress-testing ${fname:t} for option $i \"\n            builtin zcompile -R \"$fname\" 2\u003e/dev/null \u0026\u0026 {\n                builtin print \"[${ZPLGM[col-success]}Success${ZPLGM[col-rst]}]\"\n            } || {\n                builtin print \"[${ZPLGM[col-failure]}Fail${ZPLGM[col-rst]}]\"\n            }\n            builtin unsetopt \"$i\"\n        done\n    )\n```\n\nThe plugin `gemoetry-zsh/geometry` passes all the tests.\n\n```\n▲ ~/github/zplugin.git zplg stress geometry-zsh/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]\n```\n\nAlso, I'm using the plugin without problems starting  from the last conversation.","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1550696314,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4Njk1NjQxMQ=="},"target":"d9d762f021da603aba119fa1684c1b16ba650a8a927170487a05b5e9275cb030","message":"Hello,\nI have run the zplugin-stress-test command on `jedahan/geometry`:\n```\n▲ ~/github/zplugin.git zplg stress jedahan/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]```\n```\nSo the plugin won't work if someone enables  the two `*BRACES*` options. The function that does the stress test is fairly simple, I;m pasting it so that it is  known that what actually happens during the tests:\n\n```zsh\n    local -a ZPLG_STRESS_TEST_OPTIONS\n    ZPLG_STRESS_TEST_OPTIONS=( \"NO_SHORT_LOOPS\" \"IGNORE_BRACES\" \"IGNORE_CLOSE_BRACES\" \"SH\u003e\n\n    (\n        builtin emulate -LR ksh\n        builtin unsetopt shglob kshglob\n        for i in \"${ZPLG_STRESS_TEST_OPTIONS[@]}\"; do\n            builtin setopt \"$i\"\n            builtin print -n \"Stress-testing ${fname:t} for option $i \"\n            builtin zcompile -R \"$fname\" 2\u003e/dev/null \u0026\u0026 {\n                builtin print \"[${ZPLGM[col-success]}Success${ZPLGM[col-rst]}]\"\n            } || {\n                builtin print \"[${ZPLGM[col-failure]}Fail${ZPLGM[col-rst]}]\"\n            }\n            builtin unsetopt \"$i\"\n        done\n    )\n```\n\nThe plugin `gemoetry-zsh/geometry` passes all the tests.\n\n```\n▲ ~/github/zplugin.git zplg stress geometry-zsh/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]\n```\n\nAlso, I'm using the new plugin without problems starting  from the last conversation.","files":null},{"type":6,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1550696674,"metadata":{"github-id":"MDE1OlVzZXJDb250ZW50RWRpdDE4Njk1ODczNA=="},"target":"d9d762f021da603aba119fa1684c1b16ba650a8a927170487a05b5e9275cb030","message":"Hello,\nI have run the zplugin-stress-test command on `jedahan/geometry`:\n```\n▲ ~/github/zplugin.git zplg stress jedahan/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Fail]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]```\n```\nSo the plugin won't work if someone enables  the two `*BRACES*` options. The function that does the stress test is fairly simple, I;m pasting it so that it is  known that what actually happens during the tests:\n\n```zsh\n    local -a ZPLG_STRESS_TEST_OPTIONS\n    ZPLG_STRESS_TEST_OPTIONS=( \"NO_SHORT_LOOPS\" \"IGNORE_BRACES\" \"IGNORE_CLOSE_BRACES\" \"SH_GLOB\" \"CSH_JUNKIE_QUOTES\" \"NO_MULTI_FUNC_DEF\" )\n\n    (\n        builtin emulate -LR ksh\n        builtin unsetopt shglob kshglob\n        for i in \"${ZPLG_STRESS_TEST_OPTIONS[@]}\"; do\n            builtin setopt \"$i\"\n            builtin print -n \"Stress-testing ${fname:t} for option $i \"\n            builtin zcompile -R \"$fname\" 2\u003e/dev/null \u0026\u0026 {\n                builtin print \"[${ZPLGM[col-success]}Success${ZPLGM[col-rst]}]\"\n            } || {\n                builtin print \"[${ZPLGM[col-failure]}Fail${ZPLGM[col-rst]}]\"\n            }\n            builtin unsetopt \"$i\"\n        done\n    )\n```\n\nThe plugin `gemoetry-zsh/geometry` passes all the tests.\n\n```\n▲ ~/github/zplugin.git zplg stress geometry-zsh/geometry                     master 1d::●::⬡\nStress-testing geometry.plugin.zsh for option NO_SHORT_LOOPS [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option IGNORE_CLOSE_BRACES [Success]\nStress-testing geometry.plugin.zsh for option SH_GLOB [Success]\nStress-testing geometry.plugin.zsh for option CSH_JUNKIE_QUOTES [Success]\nStress-testing geometry.plugin.zsh for option NO_MULTI_FUNC_DEF [Success]\n```\n\nAlso, I'm using the new plugin without problems starting  from the last conversation.","files":null},{"type":4,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1550698300,"metadata":{"github-id":"MDEzOlJlb3BlbmVkRXZlbnQyMTUzMjQ3MzE0"},"status":1},{"type":2,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1550698355,"metadata":{"github-id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjE1MzI0OTM0MQ=="},"title":"zwc parsing errors with ignore_braces / ignore_close_braces","was":"zwc parsing errors with ignore_braces / ignore_close_braces"},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1550945115,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ2NjY3NDMyOA==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-466674328"},"message":"I think I fixed this in the latest mnml branch.\n\nIt would be cool to add tests to either the dockerfile or somewhere else.\n\nAll I did was manually do `setopt ignore_braces; zcompile -R geometry.zsh` and `zcompile -R functions/*zsh`....","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1550945179,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ2NjY3NDQwMg==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-466674402"},"message":"err, the mnml branch on https://github.com/jedahan/geometry","files":null},{"type":3,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1566383773,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyMzQwMDUzNQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-523400535"},"message":"should be fixed","files":null},{"type":4,"author":{"id":"940aabe64f74a4490b5129922ab6d0d7b9926a38"},"timestamp":1566383773,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MjU3MjYwMjc0NA=="},"status":2},{"type":3,"author":{"id":"33950328296720bc91f2399d6dc2e05aaa877cba"},"timestamp":1566438293,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDUyMzcxMjQ4Mw==","github-url":"https://github.com/geometry-zsh/geometry/issues/239#issuecomment-523712483"},"message":"Yes I've checked, both geometry-zsh and mnml pass the stress test.","files":null}]}
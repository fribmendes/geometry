{"version":1,"ops":[{"type":5,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1481241994,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDg4NzY5NDM2MA=="},"added":["enhancement"],"removed":[]},{"type":5,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1481241994,"metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDg4NzY5NDM2MQ=="},"added":["help wanted"],"removed":[]},{"type":3,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1483021649,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTYzNzQ3Mg==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-269637472"},"message":"I'm not really sure about this feature/change as this may impose more tools/processes for new comers in order to submit a PR and may make PR/review/merging a bit hard. At least it'll add a new step in the development process.\n\nI'm thinking about the following setup:\n\n- Add `src/main.zsh` with current `geometry.zsh`\n- `geometry.zsh` will become the result of `cat`ing `lib/*`, `plugins/*` and `src/*`\n\nWe'll probably need a `Makefile` (or similar build tooling) for this.\n\nSo, basically we're adding a new step to the development process:\n\n1- Make code change\n2- Build geometry with `make` command\n3- Test change\n\nWhen handling PR we'll need to request for the submitter to build geometry before merging their changes (or do it ourselves).\n\nIs it worth adding this complexity just to keep geometry a single file? @frmendes Any thoughts?","files":null},{"type":3,"author":{"id":"d031c473ea44f2997770f844cf5bd248db34a431"},"timestamp":1483097451,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTc2MTQ4MQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-269761481"},"message":"Well, it will definitely make it harder to develop, but there could be a few alternatives.\n\nSetting a `GEOMETRY_ENV` environment variable to `production` by default and only compiling and sourcing the compiled file in that case. If set to `development`, it sources just like it is.\n\nCompiling everything has the advantage of letting us track versions as well. The version on master doesn't necessarily have to be the compiled version. We would only compile when bumping up. That should leave that logic out of the development process and the PR creation.\n\nWhat bothers me the most is that this would mean users would have an extra-step before setting up geometry, right? It's not just \"plug and play\" anymore.","files":null},{"type":3,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1483100462,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTc2NTc1NA==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-269765754"},"message":"Yeah, that's a good approach. By default geometry will run by sourcing `lib` and `plugins`, when compiled there is no need for sourcing. No extra steps required for developers except for the one involved in releasing the changes.\n\nMaybe it's a good time to implement release versions.\n\nThe main advantage for end users is that they could install geometry just by `wget / curl`  and sourcing it (ie, no need for `git` or downloading the zip and unzipping it).","files":null},{"type":3,"author":{"id":"d031c473ea44f2997770f844cf5bd248db34a431"},"timestamp":1483101167,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTc2NjcxNQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-269766715"},"message":"We would be dropping `zplug`, `antigen`, etc plug and play support wouldn't we? I'm fine with that, since it's just sourcing the plugin on `.zshrc`.","files":null},{"type":3,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1483101381,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI2OTc2NzAwOA==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-269767008"},"message":"Not at all as for end users it'll be completely transparent. At the end of the day `geometry.zsh` will look the same for `antigen`, `zplug`, end users etc. regardless of the install method.","files":null},{"type":3,"author":{"id":"d031c473ea44f2997770f844cf5bd248db34a431"},"timestamp":1483810770,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3MTA5NzkyMg==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-271097922"},"message":"I'm really fine with that. Adding release versions should be good now as the theme has grown a bit by now. After #51 gets resolved it's more of a prompt configuration wrapper with cool defaults than a simple theme. I'm definitely down for that.\n\nSo, I guess it goes like this:\n\n* [ ] Add an environment variable for development or production.\n* [ ] Have geometry source whatever it needs depending on the environment.\n* [ ] Add a `bin/compile` file that compiles everything into a `build/geometry.zsh` and bumps the version.\n* [ ] Add a `CONTRIBUTING.md` and start tagging versions.\n\nDid I forget anything?","files":null},{"type":3,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1483817194,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDI3MTEwNDM2MQ==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-271104361"},"message":"Not really sure about auto bumping versions but I'll go ahead and start with the compile steps and prod/dev logic.","files":null},{"type":3,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1495473665,"metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDMwMzE2NDg2NA==","github-url":"https://github.com/geometry-zsh/geometry/issues/50#issuecomment-303164864"},"message":"Forgot about this one. Compilation will not be implemented. Closing.","files":null},{"type":4,"author":{"id":"d4eb9eb05c8e7e760e59ab8c578fae019321a3fc"},"timestamp":1495473665,"metadata":{"github-id":"MDExOkNsb3NlZEV2ZW50MTA5MjIyMzg4Ng=="},"status":2}]}
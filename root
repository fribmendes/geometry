{"version":1,"ops":[{"type":1,"author":{"id":"e81f70ff599e26140618b2bd71f8df2bd6f1498a"},"timestamp":1537478513,"metadata":{"github-id":"MDU6SXNzdWUzNjIzNzI2ODg=","github-url":"https://github.com/geometry-zsh/geometry/issues/224","origin":"github"},"title":"Git dirtiness check not working correctly","message":"Hello! I thought I might bring this to your attention, since it seems that the dirtiness check for git repositories is not working correctly. It's pretty simple to reproduce:\n\n```\nmkdir test \u0026\u0026 cd test\ngit init\nmkdir dir1\nmkdir dir2\ntouch dir1/placeholder\ncd dir2\n```\n\nAt the end of running these commands, you'll notice that the git repository is being marked as clean inside **dir2** when it should be marked as dirty. However, when you `cd ..` outside of **dir2**, the repository is then correctly marked as being dirty.\n\nThe problem seems to be arising from a bug in `prompt_geometry_git_status()`. You are running the commands `git status --porcelain --ignore-submodules HEAD` and `git ls-files --others --modified --exclude-standard` to perform the dirtiness check; however, the `ls-files` command implicity runs from the current directory. What you really want is `git ls-files --others --modified --exclude-standard $(git rev-parse --show-toplevel)` which then runs the command from the top level git directory. \n\nMy solution is to is to run a patched version of the function that just uses `git status --porcelain --ignore-submodules` and removes the `ls-files` command. I added a flag `PROMPT_GEOMETRY_GIT_UNTRACKED_DIRTY` that can disable checks for untracked files for large repositories (by simply running a `git diff`). It's the approach that the pure prompt takes. I'll be submitting a pull request shortly that you guys can review.\n\nLove the prompt otherwise though. Keep up the good work!","files":null}]}